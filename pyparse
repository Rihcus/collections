import ast

# Function to find function calls and imports
def find_imported_function_calls(code):
    tree = ast.parse(code)

    imported_functions = []
    imports = {}

    # Find imported function calls
    for node in ast.walk(tree):
        if isinstance(node, ast.Call) and isinstance(node.func, ast.Attribute):
            if isinstance(node.func.value, ast.Name):
                variable_name = node.func.value.id
                if variable_name in imports:
                    imported_functions.append(f"{imports[variable_name]}.{node.func.attr}")
        elif isinstance(node, ast.Call) and isinstance(node.func, ast.Name):
            function_name = node.func.id
            if function_name in imports:
                imported_functions.append(f"{imports[function_name]}.{function_name}")

        elif isinstance(node, ast.Assign) and isinstance(node.value, ast.Call) and isinstance(node.value.func, ast.Attribute):
            if isinstance(node.value.func.value, ast.Name):
                variable_name = node.value.func.value.id
                if variable_name in imports:
                    imported_functions.append(f"{imports[variable_name]}.{node.value.func.attr}")

        elif isinstance(node, ast.Import):
            for alias in node.names:
                imports[alias.asname if alias.asname else alias.name] = alias.name

    return imported_functions

# Code snippet
code = """
import pandas as pd
x = pd.read_csv()
y = x.head(10)
f = open('test','r')
data = f.read()
f.close()
"""

# Find imported function calls in the code snippet
imported_functions = find_imported_function_calls(code)

# Display the results
print("Imported Function Calls:")
for function in imported_functions:
    print(function)
