import org.apache.hadoop.hive.ql.parse.ASTNode;
import org.apache.hadoop.hive.ql.parse.HiveParser;
import org.apache.hadoop.hive.ql.parse.ParseException;
import org.apache.hadoop.hive.ql.parse.ParseDriver;

import java.util.ArrayList;
import java.util.List;

public class HiveASTAnalyzer {

    public static void main(String[] args) {
        String hiveQuery = "select a,b,c, count(*) over(partition by a) cnt from x join y on x.a = y.z where avg(c) > 10";

        try {
            ParseDriver parseDriver = new ParseDriver();
            ASTNode astNode = parseDriver.parse(hiveQuery);
            analyzeAST(astNode);
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }

    private static void analyzeAST(ASTNode astNode) {
        int tokenType = astNode.getToken().getType();
        switch (tokenType) {
            case HiveParser.TOK_QUERY:
                // Analyze query attributes
                analyzeQueryAttributes(astNode);
                break;

            // Handle other tokens and cases as needed

            default:
                // Handle unsupported or unknown tokens
                System.out.println("Unsupported or unknown token: " + astNode.getText());
        }

        // Recursively process child nodes
        for (int i = 0; i < astNode.getChildCount(); i++) {
            ASTNode childNode = (ASTNode) astNode.getChild(i);
            analyzeAST(childNode);
        }
    }

    private static void analyzeQueryAttributes(ASTNode queryNode) {
        boolean joinedTables = false;
        boolean functionInWhere = false;
        boolean aggregationGroupBy = false;
        boolean aggregationHaving = false;
        boolean windowFunction = false;
        boolean sortingOrderBy = false;
        boolean subqueryInExistsOrIn = false;
        boolean mergeResult = false;

        List<String> tables = new ArrayList<>();

        for (int i = 0; i < queryNode.getChildCount(); i++) {
            ASTNode childNode = (ASTNode) queryNode.getChild(i);
            int tokenType = childNode.getToken().getType();

            switch (tokenType) {
                case HiveParser.TOK_JOIN:
                    joinedTables = true;
                    break;

                case HiveParser.TOK_WHERE:
                    functionInWhere = checkFunctionUsage(childNode);
                    break;

                case HiveParser.TOK_GROUPBY:
                    aggregationGroupBy = true;
                    break;

                case HiveParser.TOK_HAVING:
                    aggregationHaving = true;
                    break;

                case HiveParser.TOK_WINDOWSPEC:
                    windowFunction = true;
                    break;

                case HiveParser.TOK_ORDERBY:
                    sortingOrderBy = true;
                    break;

                case HiveParser.TOK_SUBQUERY:
                    subqueryInExistsOrIn = checkSubqueryUsage(childNode);
                    break;

                case HiveParser.TOK_UNIONALL:
                case HiveParser.TOK_UNION:
                    mergeResult = true;
                    break;

                case HiveParser.TOK_TABREF:
                    tables.add(childNode.getChild(0).getText());
                    break;

                default:
                    // Handle other attributes as needed
                    break;
            }
        }

        System.out.println("Tables joined: " + (joinedTables ? "Yes" : "No"));
        System.out.println("Functions used in WHERE clause: " + (functionInWhere ? "Yes" : "No"));
        System.out.println("Aggregation (GROUP BY): " + (aggregationGroupBy ? "Yes" : "No"));
        System.out.println("Aggregation Filter (HAVING): " + (aggregationHaving ? "
